---

---

<input type="text" id="search" placeholder="Buscar perk..." />

<p id="loading" style="display: none;">Cargando...</p>

<div id="weapons-container"></div>

<div id="buttons-container">
    <button id="prev-page" disabled>Anterior</button>
    <button id="next-page" disabled>Siguiente</button>
</div>

<script>
    let searchTerm = "";
    let currentPage = 1;
    let weapons = [];
    const searchInput = document.getElementById("search");
    const weaponsContainer = document.getElementById("weapons-container");
    const loadingText = document.getElementById("loading");
    const prevButton = document.getElementById("prev-page");
    const nextButton = document.getElementById("next-page");

    async function fetchWeapons(term) {
        if (!term) return;
        loadingText.style.display = "block";

        try {
            const response = await fetch("/api/weaponsByPerk", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ perk: term }),
            });

            const data = await response.json();
            weapons = data.weapons;
            currentPage = 1;
            renderWeapon();
            updatePaginationButtons();
        } catch (error) {
            console.error("Error en fetchWeapons:", error);
        }

        loadingText.style.display = "none";
    }

    function renderWeapon() {
        weaponsContainer.innerHTML = "";
        if (weapons.length === 0) {
            weaponsContainer.innerHTML = "<p>No se encontraron armas.</p>";
            return;
        }

        const weapon = weapons[currentPage - 1];
        const weaponElement = document.createElement("div");
        weaponElement.classList.add("weapon");
        weaponElement.innerHTML = `
            <div class="weapon-image-container">
                <img src="${weapon.icon}" alt="${weapon.name}" class="weapon-icon">
                ${weapon.iconWatermark ? `<img src="${weapon.iconWatermark}" alt="watermark" class="weapon-watermark">` : ""}
            </div>
            <strong>${weapon.name}</strong><br>
            <em>${weapon.flavorText || "No hay descripci√≥n"}</em><br>
            <h4>Perks:</h4>
            <div class="sockets-container">
            ${
                weapon.sockets && weapon.sockets.length > 0
                    ? weapon.sockets
                            .map(
                                (socket) => `
                    <div class="socket">
                        <strong>${socket.itemTypeDisplayName || "Desconocido"}</strong>
                        <ul>
                        ${
                            socket.perks.length > 0
                                ? socket.perks
                                        .map(
                                            (perk) => `
                                    <li class="perk">
                                        <div class="tooltip">
                                            <h3>${perk.name}</h3>
                                            <h4>${socket.itemTypeDisplayName || "Tipo Desconocido"}</h2>
                                            <p>${perk.description}</p>
                                        </div>
                                        ${perk.icon ? `<img src="https://www.bungie.net${perk.icon}" alt="${perk.name}">` : ""}
                                    </li>
                                `,
                                        )
                                        .join("")
                                : "<li>No hay perks disponibles</li>"
                        }
                        </ul>
                    </div>
                `,
                            )
                            .join("")
                    : "<p>No tiene sockets con perks aleatorios</p>"
            }
            </div>
        `;
        weaponsContainer.appendChild(weaponElement);
    }

    function updatePaginationButtons() {
        prevButton.disabled = currentPage === 1;
        nextButton.disabled = currentPage >= weapons.length;
    }

    searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
            e.preventDefault();
            searchTerm = searchInput.value.trim();
            if (searchTerm) {
                fetchWeapons(searchTerm);
            }
        }
    });

    prevButton.addEventListener("click", () => {
        if (currentPage > 1) {
            currentPage--;
            renderWeapon();
            updatePaginationButtons();
        }
    });

    nextButton.addEventListener("click", () => {
        if (currentPage < weapons.length) {
            currentPage++;
            renderWeapon();
            updatePaginationButtons();
        }
    });
</script>
